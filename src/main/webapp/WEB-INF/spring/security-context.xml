<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:sec="http://www.springframework.org/schema/security"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xmlns:mybatis-spring="http://mybatis.org/schema/mybatis-spring"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-4.3.xsd
		http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring-1.2.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">

	<!-- 0.web.xml에 시큐리티 필터를 필터중에서 가장 마지막에 등록 1.security-context.xml 작성 1-1.로그인에는 
		화면이 있는 폼 로그인과 화면이 존재하지 않는 basic auth, digest auth가 있다. 1-2.폼 로그인에 대한 자동 설정을 
		활성화한다. 1-3.폼 로그인을 커스터마이즈 한다. 아이디, 비밀번호, 로그인 페이지 보여주는 주소, 로그인 처리 주소, 로그인후 
		이동할 주소, 로그인 실패시 이동할 주소 1-4.로그인 후 이동 주소를 원래가려던 곳으로 갈려면 LoginSuccesHandler를 
		작성 후 등록 1-5.로그아웃 처리할 주소(post), 로그아웃 후 이동할 주소 2-1.사용자 인증 서비스 등록한다. 2-2.사용자 
		권한은 단순한 문자열로 누적되지 않으며 기본적으로 ROLE_로 시작한다. ROLE_ADMIN은 ROLE_USER롤 포함하지 않는다. 
		2.servlet-context.xml 작성 <security:global-method-security pre-post-annotations="enabled" 
		secured-annotations="enabled" /> 2-1.시큐리티 annotation을 활성화한다. @PreAuthorize, 
		@PostAuthorize, @PreFilter, @PostFilter를 사용하기 위해 2-2.시큐리티 annotation 사용 -->

	<!--   <bean id="passwordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder" 
		/> -->
	 <bean id="passwordEncoder" class="org.springframework.security.crypto.password.NoOpPasswordEncoder" 
		/> 

	<sec:http auto-config="true" use-expressions="true">
		<sec:form-login username-parameter="m_id"
			password-parameter="m_pw" login-page="/loginfrm"
			login-processing-url="/login" default-target-url="/"
			authentication-failure-url="/loginfrm?fail=true" />
		<sec:logout logout-url="/logout" logout-success-url="/" />
		<sec:headers>
			<sec:frame-options policy="SAMEORIGIN" />
		</sec:headers>
	</sec:http>

	<!-- <sec:authentication-manager> <sec:authentication-provider> <sec:user-service> 
		<sec:user name="admin" password="1234" authorities="ROLE_USER, ROLE_MANAGER, 
		ROLE_ADMIN" /> <sec:user name="manager" password="1234" authorities="ROLE_USER, 
		ROLE_MANAGER" /> <sec:user name="user" password="1234" authorities="ROLE_USER" 
		/> </sec:user-service> <sec:password-encoder ref="passwordEncoder" /> </sec:authentication-provider> 
		</sec:authentication-manager> -->


	<!-- JDBC를 이용한 로그인 -->
	<sec:authentication-manager>
		<sec:authentication-provider>
			<sec:jdbc-user-service
				data-source-ref="dataSource"
				users-by-username-query="select MB_ID, MB_PW, ENABLED FROM MEMBER WHERE MB_ID=?"
				authorities-by-username-query="select ID, authority FROM authorities WHERE ID=?" />
		</sec:authentication-provider>
	</sec:authentication-manager>




</beans>